/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.notes.controller;

import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.notes.dao.NoteDAO;
import org.notes.dto.NoteRegistrationInfo;
import org.notes.dto.NoteResponseById;
import org.notes.dto.NotesResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.time.OffsetDateTime;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-26T18:46:30.180385+03:00[Europe/Kiev]")
@Validated
@Tag(name = "notes", description = "the notes API")
@Controller
@RequestMapping("${openapi.user.base-path:/api}")
public class NotesApiImpl implements NotesApi {

    @Autowired
    private NoteDAO noteDAO;

    @Override
    public ResponseEntity<NoteResponseById> getById(
            @Parameter(name = "noteId", description = "note id", schema = @Schema(description = ""))
            @Valid @RequestParam(value = "noteId", required = false) Integer noteId) {

        //var note = noteService.getNoteById(noteId);
        var note = noteDAO.findById(noteId);

        return new ResponseEntity<>(note, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<NoteResponseById> createNote(
            @Parameter(name = "NoteRegistrationInfo", description = "", schema = @Schema(description = ""))
            @Valid @RequestBody(required = false) NoteRegistrationInfo noteRegistrationInfo) {

        OffsetDateTime currentDate = OffsetDateTime.now();

        //NoteResponseById body = NoteResponseByIdBuilder.builder().build()
        //        .id(0)
        //        .title(noteRegistrationInfo.getTitle())
        //        .message(noteRegistrationInfo.getMessage())
        //        .dateCreation(currentDate)
        //        .dateUpdate(currentDate);

        NoteResponseById note = new NoteResponseById();
        note.setId(0);
        note.title(noteRegistrationInfo.getTitle());
        note.message(noteRegistrationInfo.getMessage());
        note.dateCreation(currentDate);
        note.dateUpdate(currentDate);

        noteDAO.save(note);

        //return new ResponseEntity<>(HttpStatus.OK);
        return new ResponseEntity<>(note, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<NotesResponse> getNotes() {
        //List<NoteResponseById> notes = noteService.getAllNotes();

        //todo fix convertion
        var notes = noteDAO.findAll();
        NotesResponse notesResponse = new NotesResponse();
        notesResponse.setNotes(notes);


        return new ResponseEntity<>(notesResponse, HttpStatus.OK);

        //return new ResponseEntity<>(notesResponse, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<NoteResponseById> deleteNote(
            @Parameter(name = "noteId", description = "note id")
            @Valid @RequestParam(value = "noteId", required = true) Integer noteId) {
        //var removedNote = noteService.removeNoteById(noteId);

        noteDAO.delete(noteId);

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @Override
    //todo need to fix
    public ResponseEntity<NoteResponseById> updateNote(
            @Parameter(name = "noteId") @Valid @RequestParam(value = "noteId", required = true) Integer noteId,
            @Parameter(name = "NoteRegistrationInfo") @Valid @RequestBody NoteRegistrationInfo noteRegistrationInfo) {

        //var updatedNote = noteService.updatedNoteById(noteId, noteRegistrationInfo);
        NoteResponseById note = new NoteResponseById();
        note.setId(noteId);
        note.title(noteRegistrationInfo.getTitle());
        note.message(noteRegistrationInfo.getMessage());
        //note.dateCreation(currentDate);
        note.dateUpdate(OffsetDateTime.now());

        noteDAO.update(noteId, note);
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
