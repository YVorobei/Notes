/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.notes.controller;

import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.notes.dto.NoteRegistrationInfo;
import org.notes.dto.Note;
import org.notes.dto.ListOfNotes;
import org.notes.service.NoteService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.time.OffsetDateTime;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-26T18:46:30.180385+03:00[Europe/Kiev]")
@Validated
@Tag(name = "notes", description = "the notes API")
@Controller
@RequestMapping("${openapi.user.base-path:/api}")
public class NotesApiControllerImpl implements NotesApiController {

    private NoteService noteService;

    public NotesApiControllerImpl(NoteService noteService) {
        this.noteService = noteService;
    }

    @Override
    public ResponseEntity<Note> getById(
            @Parameter(name = "noteId", description = "note id", schema = @Schema(description = ""))
            @Valid @RequestParam(value = "noteId", required = false) Integer noteId) {

        var note = noteService.findById(noteId);

        return new ResponseEntity<>(note, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Note> createNote(
            @Parameter(name = "NoteRegistrationInfo", description = "", schema = @Schema(description = ""))
            @Valid @RequestBody(required = false) NoteRegistrationInfo noteRegistrationInfo) {

        OffsetDateTime currentDate = OffsetDateTime.now();

        Note note = new Note();
        note.setId(0);
        note.title(noteRegistrationInfo.getTitle());
        note.message(noteRegistrationInfo.getMessage());
        note.dateCreation(currentDate);
        note.dateUpdate(currentDate);

        noteService.save(note);

        return new ResponseEntity<>(note, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<ListOfNotes> getNotes() {
        var notes = noteService.findAll();
        ListOfNotes listOfNotes = new ListOfNotes();
        listOfNotes.setNotes(notes);

        return new ResponseEntity<>(listOfNotes, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Note> deleteNote(
            @Parameter(name = "noteId", description = "note id")
            @Valid @RequestParam(value = "noteId", required = true) Integer noteId) {
        noteService.delete(noteId);

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Note> updateNote(
            @Parameter(name = "noteId") @Valid @RequestParam(value = "noteId", required = true) Integer noteId,
            @Parameter(name = "NoteRegistrationInfo") @Valid @RequestBody NoteRegistrationInfo noteRegistrationInfo) {

        Note note = new Note();
        note.setId(noteId);
        note.title(noteRegistrationInfo.getTitle());
        note.message(noteRegistrationInfo.getMessage());
        note.dateUpdate(OffsetDateTime.now());

        noteService.update(noteId, note);
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
